# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc

    steps:
      - uses: actions/checkout@v4

      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.os == 'windows-latest'

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/release" >> "$GITHUB_OUTPUT"

      - uses: actions/cache@v4
        id: cache-vcpkg
        with:
          path: |
            vcpkg-cache
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: Set up vcpkg binary caching (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          echo "VCPKG_FEATURE_FLAGS=manifests,registries,binarycaching" >> $GITHUB_ENV
          echo "VCPKG_BINARY_SOURCES=clear;files,${{ github.workspace }}/vcpkg-cache,readwrite" >> $GITHUB_ENV

      - name: Set up vcpkg binary caching (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "VCPKG_FEATURE_FLAGS=manifests,registries,binarycaching" >> $GITHUB_ENV
          echo "VCPKG_BINARY_SOURCES=clear;files,${{ github.workspace }}\vcpkg-cache,readwrite" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      # From Here (Linux/max OS)
      - name: Install vcpkg (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          git submodule update --init --recursive
          ./vcpkg/bootstrap-vcpkg.sh  -disableMetrics
          echo "Cache hit: ${{ steps.cache-vcpkg.outputs.cache-hit }}"
          if [[ "${{ steps.cache-vcpkg.outputs.cache-hit }}" != "true" ]]; then
            ./vcpkg/vcpkg install --x-install-root=vcpkg_installed
          fi
        shell: bash

      # From Here (Windows)
      - name: Install vcpkg (Windows)
        if: runner.os == 'Windows'
        run: |
          Get-ChildItem
          echo "VCPKG_BINARY_SOURCES: ${{ env.VCPKG_BINARY_SOURCES }}"
          git submodule update --init --recursive
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
          echo "Cache hit: ${{ steps.cache-vcpkg.outputs.cache-hit }}"
          if ("${{ steps.cache-vcpkg.outputs.cache-hit }}" -ne "true") {
            .\vcpkg\vcpkg install --x-install-root=vcpkg_installed
          }
        shell: pwsh

      - name: Install Ninja (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Install Ninja (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install ninja

      - name: Install Ninja (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install ninja
        shell: pwsh

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake --preset=release
          -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Archive Executables (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd ${{ steps.strings.outputs.build-output-dir }}
          tar -czvf main-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz -C ${{ github.workspace }} assets -C ${{ steps.strings.outputs.build-output-dir }} main
        shell: bash

      - name: Archive Executables (Windows)
        if: runner.os == 'Windows'
        run: |
          cd ${{ steps.strings.outputs.build-output-dir }}
          Compress-Archive -Path "${{ github.workspace }}/assets", "main.exe" -DestinationPath "main-${{ matrix.os }}-${{ matrix.build_type }}.zip"
        shell: pwsh

      - name: Upload Executables
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}-${{ matrix.build_type }}
          path: ${{ steps.strings.outputs.build-output-dir }}/main*.*
